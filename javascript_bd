CREATE DATABASE venda_bilhetes;

USE venda_bilhetes;

CREATE TABLE Usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    senha VARCHAR(255) NOT NULL, -- Senha será armazenada como hash
    telefone VARCHAR(20),
    endereco TEXT
);
const { Sequelize } = require('sequelize');

const sequelize = new Sequelize('venda_bilhetes', 'root', 'password', {
    host: 'localhost',
    dialect: 'mysql'
});

module.exports = sequelize;
const { DataTypes } = require('sequelize');
const sequelize = require('../config/database');

const Usuario = sequelize.define('Usuario', {
    nome: { type: DataTypes.STRING, allowNull: false },
    email: { type: DataTypes.STRING, allowNull: false, unique: true },
    senha: { type: DataTypes.STRING, allowNull: false }, // Será armazenada como hash
    telefone: { type: DataTypes.STRING, allowNull: true },
    endereco: { type: DataTypes.TEXT, allowNull: true }
});

module.exports = Usuario;
const express = require('express');
const bodyParser = require('body-parser');
const bcrypt = require('bcrypt');
const sequelize = require('./config/database');
const Usuario = require('./models/Usuario');

const app = express();

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Sincronizar os modelos com o banco de dados
sequelize.sync()
    .then(() => {
        console.log('Banco de dados sincronizado');
    })
    .catch((err) => {
        console.error('Erro ao sincronizar banco de dados:', err);
    });

// Rota para registro de novo usuário
app.post('/registro', async (req, res) => {
    const { nome, email, senha, telefone, endereco } = req.body;
    try {
        // Hash da senha
        const hashedPassword = await bcrypt.hash(senha, 10);
        
        // Criar novo usuário
        const usuario = await Usuario.create({ nome, email, senha: hashedPassword, telefone, endereco });
        res.status(201).json({ message: 'Usuário registrado com sucesso!', usuario });
    } catch (err) {
        console.error('Erro ao registrar usuário:', err);
        res.status(500).json({ message: 'Erro ao registrar usuário.' });
    }
});

// Rota para login de usuário
app.post('/login', async (req, res) => {
    const { email, senha } = req.body;
    try {
        // Encontrar usuário pelo email
        const usuario = await Usuario.findOne({ where: { email } });
        
        if (!usuario) {
            return res.status(400).json({ message: 'Usuário não encontrado.' });
        }

        // Comparar a senha informada com o hash armazenado
        const isMatch = await bcrypt.compare(senha, usuario.senha);
        
        if (!isMatch) {
            return res.status(400).json({ message: 'Senha incorreta.' });
        }

        res.status(200).json({ message: 'Login bem-sucedido!', usuario });
    } catch (err) {
        console.error('Erro ao fazer login:', err);
        res.status(500).json({ message: 'Erro ao fazer login.' });
    }
});

// Porta para o servidor
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Servidor rodando na porta ${PORT}`);
});
